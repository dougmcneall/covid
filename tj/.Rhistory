fast_diff <- fast_summ[ ,2] - fast_summ[ ,1]
fast_bp <- t(cbind(fast_summ[ ,1], fast_diff))
fast_bp
}
par(las = 2, mar = c(9,5,3,2))
barplot(bp_convert(fast_tell), col = c('skyblue', 'grey'),
ylab = 'relative sensitivity',
main = 'FAST99 Sensitivity')
head(X)
head(X_norm)
head(dat)
max(dat$deaths)
mx <- which.max(dat$deaths)
mx
par(mfrow = c(3,5 ))
for(i in 1:ncol(X)){
plot(X_norm[, i], y)
}
mx <- which.max(dat$deaths)
dat_trunc <- dat[-mx, ]
n <- nrow(dat_trunc)
p <- ncol(dat_trunc) - 1
X <- dat_trunc[, 1:p]
y <- c(dat_trunc['deaths'], recursive = TRUE)
X_norm <- normalize(X)
par(mfrow = c(3,5 ))
for(i in 1:ncol(X)){
plot(X_norm[, i], y)
}
fit <- km(~., design = X_norm, response = y, control = list(trace = FALSE))
# Generate a design for the FAST99 analysis
X_fast <- fast99(model = NULL, factors = colnames(X), n = 3000,
q = "qunif", q.arg = list(min = 0, max = 1))
# Predict the response at the FAST99 design points using the emulator
pred_fast = predict(fit, newdata = X_fast$X, type = 'UK')
# Calculate the sensitivity indices
fast_tell <- tell(X_fast, pred_fast$mean)
bp_convert <- function(fastmodel){
# get the FAST summary into an easier format for barplot
fast_summ <- print(fastmodel)
fast_diff <- fast_summ[ ,2] - fast_summ[ ,1]
fast_bp <- t(cbind(fast_summ[ ,1], fast_diff))
fast_bp
}
par(las = 2, mar = c(9,5,3,2))
barplot(bp_convert(fast_tell), col = c('skyblue', 'grey'),
ylab = 'relative sensitivity',
main = 'FAST99 Sensitivity')
plot(X_norm$eta, X$eta)
plot(X_norm[, 'eta'], X[, 'eta'])
plot(X_norm[, 'eta'], y)
fit <- km(~., design = X_norm, response = y, control = list(trace = FALSE))
plot(fit)
par(mfrow = c(3,5 ))
for(i in 1:ncol(X)){
plot(X_norm[, i], log(y))
}
par(mfrow = c(3,5 ))
for(i in 1:ncol(X)){
plot(X_norm[, i], log(y))
}
par(mfrow = c(5,3 ))
for(i in 1:ncol(X)){
plot(X_norm[, i], log(y))
}
fit <- km(~., design = X_norm, response = log(y), control = list(trace = FALSE))
# Generate a design for the FAST99 analysis
X_fast <- fast99(model = NULL, factors = colnames(X), n = 3000,
q = "qunif", q.arg = list(min = 0, max = 1))
# Predict the response at the FAST99 design points using the emulator
pred_fast = predict(fit, newdata = X_fast$X, type = 'UK')
# Calculate the sensitivity indices
fast_tell <- tell(X_fast, pred_fast$mean)
bp_convert <- function(fastmodel){
# get the FAST summary into an easier format for barplot
fast_summ <- print(fastmodel)
fast_diff <- fast_summ[ ,2] - fast_summ[ ,1]
fast_bp <- t(cbind(fast_summ[ ,1], fast_diff))
fast_bp
}
par(las = 2, mar = c(9,5,3,2))
barplot(bp_convert(fast_tell), col = c('skyblue', 'grey'),
ylab = 'relative sensitivity',
main = 'FAST99 Sensitivity')
par(mfrow = c(5,3 ))
for(i in 1:ncol(X_norm)){
plot(X_norm[, i], log(y), xlab = colnames(X_norm)[i] )
}
fit <- km(~., design = X_norm, response = log(y), control = list(trace = FALSE))
plot(fit)
pred_fast
names(pred_fast)
length(pred_fast$mean)
dim(X_fast$X)
plot(X_fast[1:3000], pred_fast$mean[1:3000])
plot(X_fast$X[1,1:3000], pred_fast$mean[1:3000])
plot(X_fast$X[1:3000,1], pred_fast$mean[1:3000])
plot(X_fast$X[42001:45000,15], pred_fast$mean[42001:45000])
plot(log(y))
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(emtools)
library(viztools)
library(imptools)
library(sensitivity)
library(tidyverse)
bp_convert <- function(fastmodel){
# get the FAST summary into an easier format for barplot
fast_summ <- print(fastmodel)
fast_diff <- fast_summ[ ,2] - fast_summ[ ,1]
fast_bp <- t(cbind(fast_summ[ ,1], fast_diff))
fast_bp
}
dat <- read.csv('../data/regionLondonW12age8.csv')
mx <- which.max(dat$deaths)
dat_trunc <- dat[-mx, ]
n <- nrow(dat_trunc)
p <- ncol(dat_trunc) - 1
X <- dat_trunc[, 1:p]
y <- c(dat_trunc['deaths'], recursive = TRUE)
X_norm <- normalize(X)
par(mfrow = c(5,3 ))
for(i in 1:ncol(X_norm)){
plot(X_norm[, i], log(y), xlab = colnames(X_norm)[i] )
}
fit <- km(~., design = X_norm, response = log(y), control = list(trace = FALSE))
plot(fit)
# Generate a design for the FAST99 analysis
X_fast <- fast99(model = NULL, factors = colnames(X_norm), n = 3000,
q = "qunif", q.arg = list(min = 0, max = 1))
# Predict the response at the FAST99 design points using the emulator
pred_fast = predict(fit, newdata = X_fast$X, type = 'UK')
# Calculate the sensitivity indices
fast_tell <- tell(X_fast, pred_fast$mean)
bp_convert <- function(fastmodel){
# get the FAST summary into an easier format for barplot
fast_summ <- print(fastmodel)
fast_diff <- fast_summ[ ,2] - fast_summ[ ,1]
fast_bp <- t(cbind(fast_summ[ ,1], fast_diff))
fast_bp
}
par(las = 2, mar = c(9,5,3,2))
barplot(bp_convert(fast_tell), col = c('skyblue', 'grey'),
ylab = 'relative sensitivity',
main = 'FAST99 Sensitivity')
head(X)
head(X_norm)
# Generate a design for the FAST99 analysis
X_fast <- fast99(model = NULL, factors = colnames(X_norm), n = 300,
q = "qunif", q.arg = list(min = 0, max = 1))
# Predict the response at the FAST99 design points using the emulator
pred_fast = predict(fit, newdata = X_fast$X, type = 'UK')
# Calculate the sensitivity indices
fast_tell <- tell(X_fast, pred_fast$mean)
bp_convert <- function(fastmodel){
# get the FAST summary into an easier format for barplot
fast_summ <- print(fastmodel)
fast_diff <- fast_summ[ ,2] - fast_summ[ ,1]
fast_bp <- t(cbind(fast_summ[ ,1], fast_diff))
fast_bp
}
par(las = 2, mar = c(9,5,3,2))
barplot(bp_convert(fast_tell), col = c('skyblue', 'grey'),
ylab = 'relative sensitivity',
main = 'FAST99 Sensitivity')
# Generate a design for the FAST99 analysis
X_fast <- fast99(model = NULL, factors = colnames(X_norm), n = 10000,
q = "qunif", q.arg = list(min = 0, max = 1))
# Predict the response at the FAST99 design points using the emulator
pred_fast = predict(fit, newdata = X_fast$X, type = 'UK')
# Calculate the sensitivity indices
fast_tell <- tell(X_fast, pred_fast$mean)
bp_convert <- function(fastmodel){
# get the FAST summary into an easier format for barplot
fast_summ <- print(fastmodel)
fast_diff <- fast_summ[ ,2] - fast_summ[ ,1]
fast_bp <- t(cbind(fast_summ[ ,1], fast_diff))
fast_bp
}
par(las = 2, mar = c(9,5,3,2))
barplot(bp_convert(fast_tell), col = c('skyblue', 'grey'),
ylab = 'relative sensitivity',
main = 'FAST99 Sensitivity')
?oaat_design
X_oaat <- oaat_design(X_norm, n = 21, med = TRUE)
oaatLinePlot
X_oaat <- oaat_design(X_norm, n = 21, med = TRUE)
pred_oaat <- predict(fit, newdata = X_oaat, type = 'UK')
y_oaat_mean <- pred_oaat$mean
y_oaat_sd <- pred_oaat$sd
oaatLinePlot(X_oaat, y_oaat_mean = y_oaat_mean, y_oaat_sd = y_oaat_sd, n_oaat = 21, nr = 5, nc = 3 )
oaatLinePlot <- function (X_oaat, y_oaat_mean, y_oaat_sd, n_oaat, nr, nc, linecol = "black",
shadecol = "grey", ...)
{
col.transp <- adjustcolor(shadecol, alpha = 0.5)
par(mfrow = c(nr, nc), oma = c(0.1, 0.1, 3, 0.1), mar = c(2,
2, 3, 1))
for (i in 1:ncol(X_oaat)) {
ix <- seq(from = ((i * n_oaat) - (n_oaat - 1)), to = (i *
n_oaat), by = 1)
plot(X_oaat[ix, i], y_oaat_mean[ix], xlim = c(0, 1),
ylim = range(c(y_oaat_mean + (2 * y_oaat_sd), y_oaat_mean -
(2 * y_oaat_sd))), xlab = colnames(X_oaat)[i],
type = "n", bty = "n", ...)
polygon(x = c(X_oaat[ix, i], rev(X_oaat[ix, i])), y = c(y_oaat_mean[ix] -
(2 * y_oaat_sd[ix]), rev(y_oaat_mean[ix] + (2 * y_oaat_sd[ix]))),
col = col.transp, border = col.transp)
lines(X_oaat[ix, i], y_oaat_mean[ix], xlim = c(0, 1),
lty = "solid", col = linecol)
mtext(colnames(X_oaat)[i], side = 3, line = 0.5)
}
mtext("One-at-a-time sensitivity", side = 3, outer = TRUE,
cex = 1.5)
}
X_oaat <- oaat_design(X_norm, n = 21, med = TRUE)
pred_oaat <- predict(fit, newdata = X_oaat, type = 'UK')
y_oaat_mean <- pred_oaat$mean
y_oaat_sd <- pred_oaat$sd
oaatLinePlot(X_oaat, y_oaat_mean = y_oaat_mean, y_oaat_sd = y_oaat_sd, n_oaat = 21, nr = 5, nc = 3 )
X_oaat <- oaat_design(X_norm, n = 21, med = TRUE)
pred_oaat <- predict(fit, newdata = X_oaat, type = 'UK')
y_oaat_mean <- pred_oaat$mean
y_oaat_sd <- pred_oaat$sd
oaatLinePlot(X_oaat, y_oaat_mean = y_oaat_mean, y_oaat_sd = y_oaat_sd, n_oaat = 21, nr = 3, nc = 5 )
fit <- km(~1, design = X_norm, response = log(y), control = list(trace = FALSE))
plot(fit)
# Generate a design for the FAST99 analysis
X_fast <- fast99(model = NULL, factors = colnames(X_norm), n = 3000,
q = "qunif", q.arg = list(min = 0, max = 1))
# Predict the response at the FAST99 design points using the emulator
pred_fast = predict(fit, newdata = X_fast$X, type = 'UK')
# Calculate the sensitivity indices
fast_tell <- tell(X_fast, pred_fast$mean)
bp_convert <- function(fastmodel){
# get the FAST summary into an easier format for barplot
fast_summ <- print(fastmodel)
fast_diff <- fast_summ[ ,2] - fast_summ[ ,1]
fast_bp <- t(cbind(fast_summ[ ,1], fast_diff))
fast_bp
}
par(las = 2, mar = c(9,5,3,2))
barplot(bp_convert(fast_tell), col = c('skyblue', 'grey'),
ylab = 'relative sensitivity',
main = 'FAST99 Sensitivity')
oaatLinePlot <- function (X_oaat, y_oaat_mean, y_oaat_sd, n_oaat, nr, nc, linecol = "black",
shadecol = "grey", ...)
{
col.transp <- adjustcolor(shadecol, alpha = 0.5)
par(mfrow = c(nr, nc), oma = c(0.1, 0.1, 3, 0.1), mar = c(2,
2, 3, 1))
for (i in 1:ncol(X_oaat)) {
ix <- seq(from = ((i * n_oaat) - (n_oaat - 1)), to = (i *
n_oaat), by = 1)
plot(X_oaat[ix, i], y_oaat_mean[ix], xlim = c(0, 1),
ylim = range(c(y_oaat_mean + (2 * y_oaat_sd), y_oaat_mean -
(2 * y_oaat_sd))), xlab = colnames(X_oaat)[i],
type = "n", bty = "n", ...)
polygon(x = c(X_oaat[ix, i], rev(X_oaat[ix, i])), y = c(y_oaat_mean[ix] -
(2 * y_oaat_sd[ix]), rev(y_oaat_mean[ix] + (2 * y_oaat_sd[ix]))),
col = col.transp, border = col.transp)
lines(X_oaat[ix, i], y_oaat_mean[ix], xlim = c(0, 1),
lty = "solid", col = linecol)
mtext(colnames(X_oaat)[i], side = 3, line = 0.5)
}
mtext("One-at-a-time sensitivity", side = 3, outer = TRUE,
cex = 1.5)
}
X_oaat <- oaat_design(X_norm, n = 21, med = TRUE)
pred_oaat <- predict(fit, newdata = X_oaat, type = 'UK')
y_oaat_mean <- pred_oaat$mean
y_oaat_sd <- pred_oaat$sd
oaatLinePlot(X_oaat, y_oaat_mean = y_oaat_mean, y_oaat_sd = y_oaat_sd, n_oaat = 21, nr = 3, nc = 5 )
par(mfrow = c(5,3 ))
for(i in 1:ncol(X_norm)){
plot(X_norm[, i], log(y), xlab = colnames(X_norm)[i] )
}
par(mfrow = c(5,3 ))
for(i in 1:ncol(X_norm)){
plot(X_norm[, i], log(y), xlab = colnames(X_norm)[i] )
}
X_oaat <- oaat_design(X_norm, n = 21, med = TRUE)
pred_oaat <- predict(fit, newdata = X_oaat, type = 'UK')
y_oaat_mean <- pred_oaat$mean
y_oaat_sd <- pred_oaat$sd
oaatLinePlot(X_oaat, y_oaat_mean = y_oaat_mean, y_oaat_sd = y_oaat_sd, n_oaat = 21, nr = 5, nc = 3 )
X_oaat <- oaat_design(X_norm, n = 21, med = TRUE)
pred_oaat <- predict(fit, newdata = X_oaat, type = 'UK')
y_oaat_mean <- pred_oaat$mean
y_oaat_sd <- pred_oaat$sd
oaatLinePlot(X_oaat, y_oaat_mean = y_oaat_mean, y_oaat_sd = y_oaat_sd, n_oaat = 21, nr = 5, nc = 3 )
X_oaat <- oaat_design(X_norm, n = 21, med = TRUE)
pred_oaat <- predict(fit, newdata = X_oaat, type = 'UK')
y_oaat_mean <- pred_oaat$mean
y_oaat_sd <- pred_oaat$sd
oaatLinePlot(X_oaat, y_oaat_mean = y_oaat_mean, y_oaat_sd = y_oaat_sd, n_oaat = 21, nr = 5, nc = 3 )
X_oaat <- oaat_design(X_norm, n = 21, med = TRUE)
pred_oaat <- predict(fit, newdata = X_oaat, type = 'UK')
y_oaat_mean <- pred_oaat$mean
y_oaat_sd <- pred_oaat$sd
oaatLinePlot(X_oaat, y_oaat_mean = y_oaat_mean, y_oaat_sd = y_oaat_sd, n_oaat = 21, nr = 5, nc = 3 )
dim(dat)
fit <- km(~., design = X_norm, response = log(y), control = list(trace = FALSE))
plot(fit)
# Generate a design for the FAST99 analysis
X_fast <- fast99(model = NULL, factors = colnames(X_norm), n = 3000,
q = "qunif", q.arg = list(min = 0, max = 1))
# Predict the response at the FAST99 design points using the emulator
pred_fast = predict(fit, newdata = X_fast$X, type = 'UK')
# Calculate the sensitivity indices
fast_tell <- tell(X_fast, pred_fast$mean)
bp_convert <- function(fastmodel){
# get the FAST summary into an easier format for barplot
fast_summ <- print(fastmodel)
fast_diff <- fast_summ[ ,2] - fast_summ[ ,1]
fast_bp <- t(cbind(fast_summ[ ,1], fast_diff))
fast_bp
}
par(las = 2, mar = c(9,5,3,2))
barplot(bp_convert(fast_tell), col = c('skyblue', 'grey'),
ylab = 'relative sensitivity',
main = 'FAST99 Sensitivity')
oaatLinePlot <- function (X_oaat, y_oaat_mean, y_oaat_sd, n_oaat, nr, nc, linecol = "black",
shadecol = "grey", ...)
{
col.transp <- adjustcolor(shadecol, alpha = 0.5)
par(mfrow = c(nr, nc), oma = c(0.1, 0.1, 3, 0.1), mar = c(2,
2, 3, 1))
for (i in 1:ncol(X_oaat)) {
ix <- seq(from = ((i * n_oaat) - (n_oaat - 1)), to = (i *
n_oaat), by = 1)
plot(X_oaat[ix, i], y_oaat_mean[ix], xlim = c(0, 1),
ylim = range(c(y_oaat_mean + (2 * y_oaat_sd), y_oaat_mean -
(2 * y_oaat_sd))), xlab = colnames(X_oaat)[i],
type = "n", bty = "n", ...)
polygon(x = c(X_oaat[ix, i], rev(X_oaat[ix, i])), y = c(y_oaat_mean[ix] -
(2 * y_oaat_sd[ix]), rev(y_oaat_mean[ix] + (2 * y_oaat_sd[ix]))),
col = col.transp, border = col.transp)
lines(X_oaat[ix, i], y_oaat_mean[ix], xlim = c(0, 1),
lty = "solid", col = linecol)
mtext(colnames(X_oaat)[i], side = 3, line = 0.5)
}
mtext("One-at-a-time sensitivity", side = 3, outer = TRUE,
cex = 1.5)
}
test <- lm(y ~ X_norm)
summary(test)
plot(test)
plot(coef(test))
coef(test)
summary(test)
teststep <- step(test)
teststep
test <- lm(y ~ X_norm$eta)
test <- lm(y ~ X_norm[, 'eta')
test <- lm(y ~ X_norm[, 'eta'])
summary(test)
test <- lm(y ~ X_norm)
test <- lm(log(y) ~ X_norm)
summary(test)
test <- lm(log(y) ~ X_norm[, 'eta'])
summary(test)
test2 = step(test)
summary(test2)
test <- lm(log(y) ~ X_norm)
test2 = summary(test)
test2 = step(test)
summary(test2)
summary(fit)
names(fit)
fit
fit$coef
coef(fit)
fit@trend.coef
plot(fit@trend.coef)
lmfit <- lm(log(y) ~ X_norm)
summary(lmfit)
rm(lsit = ls())
rm(list = ls())
setwd('tj')
setwd('../tj')
dir()
library(tidyverse)
library(Rcpp)
library(RcppArmadillo)
library(coda)
## read parameters
disease <- read_delim("../inputs/disease.dat", delim = " ") %>%
select(starts_with("beta"), ends_with("_8"))
colnames(disease) <- gsub("_8", "", colnames(disease))
colnames(disease) <- gsub("\\.", "", colnames(disease))
library(tidyverse)
library(Rcpp)
library(RcppArmadillo)
library(coda)
## read parameters
disease <- read_delim("disease.dat", delim = " ") %>%
select(starts_with("beta"), ends_with("_8"))
colnames(disease) <- gsub("_8", "", colnames(disease))
colnames(disease) <- gsub("\\.", "", colnames(disease))
## read data
seeds <- read_csv("../inputs/time_seeds.csv", col_names = FALSE) %>%
filter(X2 == X2[1]) %>%
select(-X2) %>%
complete(X1 = seq(as.Date("2020-01-01"), as.Date("2020-03-13"), by = 1),
fill = list(X3 = 0))
library(tidyverse)
library(Rcpp)
library(RcppArmadillo)
library(coda)
## read parameters
disease <- read_delim("disease.dat", delim = " ") %>%
select(starts_with("beta"), ends_with("_8"))
colnames(disease) <- gsub("_8", "", colnames(disease))
colnames(disease) <- gsub("\\.", "", colnames(disease))
## read data
seeds <- read_csv("time_seeds.csv", col_names = FALSE) %>%
filter(X2 == X2[1]) %>%
select(-X2) %>%
complete(X1 = seq(as.Date("2020-01-01"), as.Date("2020-03-13"), by = 1),
fill = list(X3 = 0))
DH_prime <- seeds$X3
dim(disease)
disease
seed
seeds
print(seeds)
?print.tibble
tail(seeds)
DH_prime
DI_prime <- rep(0, length(DH_prime))
## set parameters
parind <- 2
pH <- disease$pH[parind]
pHD <- disease$pHD[parind]
pI1 <- disease$pI1[parind]
pI1D <- disease$pI1D[parind]
pI1H <- disease$pI1H[parind]
pI2 <- disease$pI2[parind]
pP <- disease$pP[parind]
pE <- disease$pE[parind]
pEP <- disease$pEP[parind]
pA <- disease$pA[parind]
beta <- disease$`beta[3]`[parind]
betaA <- disease$`beta[6]`[parind]
Npop <- 56082077
Nposs <- 100
pini <- 1 / (Nposs * length(DI_prime))
pH
pHD
betaA
iFFBS
## source FF function
sourceCpp("iFFBS.cpp")
iFFBS
## run iFFBS algorithm
test <- iFFBS(DI_prime, DH_prime, 1:length(DI_prime), Npop, Nposs, 1000,
pH, pHD, pI1, pI1D, pI1H, pI2, pP, pE, pEP, pA, beta, betaA, pini)
test
dim(test)
## trace plots
colnames(test) <- apply(expand.grid(c("S", "E", "A", "RA", "P", "I1", "I2", "RI", "DI", "H", "RH", "DH"), 1:length(DI_prime)), 1, function(x) paste0(x[1], "_", as.numeric(x[2])))
test <- as.mcmc(test)
#plot(test)
## plot marginal densities over time
test <- as.matrix(test) %>%
as_tibble() %>%
mutate(iter = 1:n()) %>%
pivot_longer(!iter, names_to = "var", values_to = "n") %>%
separate(var, c("var", "t"), sep = "_") %>%
filter(var != "S") %>%
mutate(t = as.numeric(t))
p <- ggplot(test) +
geom_violin(aes(x = t, y = n, group = t)) +
facet_wrap(~var) +
xlab("Days from 1st January 2020") +
ylab("Cumulative counts")
## check counts
pivot_wider(test, names_from = var, values_from = n) %>%
group_by(iter, t) %>%
transmute(
EAP = (E >= A + P),
ARA = (A >= RA),
PI1 = (P >= I1),
I1I2HDI = (I1 >= I2 + H + DI),
I2RI = (I2 >= RI),
HRHDH = (H >= RH + DH)
) %>%
mutate(all = all(EAP, ARA, PI1, I1I2HDI, I2RI, HRHDH)) %>%
summary()
pivot_wider(test, names_from = var, values_from = n) %>%
group_by(iter) %>%
mutate(across(E:DH, ~{. - lag(.)})) %>%
summary()
disease
dim(test)
head(test)
test
range(test$iter)
tail(test)
DI_prime
?as.mcmc
parind
pini
disease
pH
head(test)
tail(test)
head(test, 20)
tail(test)
head(test, 20)
DH_prime
DI_prime
