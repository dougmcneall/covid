}
# Fit an emulator using DiceKriging
fit = km(~., design=X.norm, response=y)
# a quick check of the emulator using cross validation
loo = leaveOneOut.km(fit, type = 'UK', trend.reestim = TRUE)
ylim = range(loo$mean - (2*loo$sd),loo$mean + (2*loo$sd) )
plot(y, loo$mean, xlab = 'max(I)', ylab = 'emulator prediction', ylim = ylim)
segments(x0 = y, y0 = loo$mean - (2*loo$sd), x1 = y, y1 = loo$mean + (2*loo$sd))
abline(0,1)
# Generate a design for the FAST99 analysis
X.fast <- fast99(model = NULL, factors = colnames(X), n = 1000,
q = "qunif", q.arg = list(min = 0, max = 1))
# Predict the response at the FAST99 design points using the emulator
pred.fast = predict(fit, newdata = X.fast$X, type = 'UK')
# Calculate the sensitivity indices
fast.tell <- tell(X.fast, pred.fast$mean)
bp.convert <- function(fastmodel){
# get the FAST summary into an easier format for barplot
fast.summ <- print(fastmodel)
fast.diff <- fast.summ[ ,2] - fast.summ[ ,1]
fast.bp <- t(cbind(fast.summ[ ,1], fast.diff))
fast.bp
}
par(las = 2, mar = c(9,5,3,2))
barplot(bp.convert(fast.tell), col = c('skyblue', 'grey'), ylab = 'relative sensitivity')
legend('topleft',legend = c('Main effect', 'Interactions'), fill = c('skyblue', 'grey') )
# Generate a design for the FAST99 analysis
X.fast <- fast99(model = NULL, factors = colnames(X), n = 3000,
q = "qunif", q.arg = list(min = 0, max = 1))
# Predict the response at the FAST99 design points using the emulator
pred.fast = predict(fit, newdata = X.fast$X, type = 'UK')
# Calculate the sensitivity indices
fast.tell <- tell(X.fast, pred.fast$mean)
bp.convert <- function(fastmodel){
# get the FAST summary into an easier format for barplot
fast.summ <- print(fastmodel)
fast.diff <- fast.summ[ ,2] - fast.summ[ ,1]
fast.bp <- t(cbind(fast.summ[ ,1], fast.diff))
fast.bp
}
par(las = 2, mar = c(9,5,3,2))
barplot(bp.convert(fast.tell), col = c('skyblue', 'grey'), ylab = 'relative sensitivity')
legend('topleft',legend = c('Main effect', 'Interactions'), fill = c('skyblue', 'grey') )
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(xlist[[i]])
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
#oat.mean.mat[, i ] = pred.sens$mean
#oat.sd.mat[, i ] = pred.sens$sd
names(pred.oat)
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
#oat.mean.mat[, i ] = pred.sens$mean
#oat.sd.mat[, i ] = pred.sens$sd
par(mfrow = c(3,3))
for(i in 1:9){}
ix <- seq(from = ((i*n) - (n-1)), to =  (i*n), by = 1)
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
#oat.mean.mat[, i ] = pred.sens$mean
#oat.sd.mat[, i ] = pred.sens$sd
par(mfrow = c(3,3))
for(i in 1:9){}
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix], pred.mean[ix], ylim = c(0,1))
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
#oat.mean.mat[, i ] = pred.sens$mean
#oat.sd.mat[, i ] = pred.sens$sd
par(mfrow = c(3,3))
for(i in 1:9){}
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix], pred.oat$mean[ix], ylim = c(0,1))
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
#oat.mean.mat[, i ] = pred.sens$mean
#oat.sd.mat[, i ] = pred.sens$sd
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix], pred.oat$mean[ix], ylim = c(0,1))
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
#oat.mean.mat[, i ] = pred.sens$mean
#oat.sd.mat[, i ] = pred.sens$sd
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix], pred.oat$mean[ix])
}
ix
dim(X)
dim(X.oat)
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
#oat.mean.mat[, i ] = pred.sens$mean
#oat.sd.mat[, i ] = pred.sens$sd
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
ix
plot(X.oat[ix], pred.oat$mean[ix])
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
#oat.mean.mat[, i ] = pred.sens$mean
#oat.sd.mat[, i ] = pred.sens$sd
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
print(ix)
plot(X.oat[ix], pred.oat$mean[ix])
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
#oat.mean.mat[, i ] = pred.sens$mean
#oat.sd.mat[, i ] = pred.sens$sd
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
print(ix)
plot(X.oat[ix], pred.oat$mean[ix], xlim = c(0,1), ylim = range(pred.oat$mean))
}
pred.oat$mean
X.oat
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
#oat.mean.mat[, i ] = pred.sens$mean
#oat.sd.mat[, i ] = pred.sens$sd
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
print(ix)
plot(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), ylim = range(pred.oat$mean))
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], pty = 'n')
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], type= 'n')
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('black', alpha = 0.5)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c( (pred.mean[ix] - pred.sd[ix]), rev(pred.mean[ix] + pred.sd[ix])),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('black', alpha = 0.5)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c( (pred$mean[ix] - pred$sd[ix]), rev(pred$mean[ix] + pred$sd[ix])),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('black', alpha = 0.5)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c( (pred.oat$mean[ix] - pred.oat$sd[ix]), rev(pred.oat$mean[ix] + pred.oat$sd[ix])),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('black', alpha = 0.1)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c( (pred.oat$mean[ix] - pred.oat$sd[ix]), rev(pred.oat$mean[ix] + pred.oat$sd[ix])),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c( (pred.oat$mean[ix] - pred.oat$sd[ix]), rev(pred.oat$mean[ix] + pred.oat$sd[ix])),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c( (pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + 2*(pred.oat$sd[ix])),
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c( (pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + (2*pred.oat$sd[ix])),
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c(pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + (2*pred.oat$sd[ix]))),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], ylab = 'maximum infections', type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c(pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + (2*pred.oat$sd[ix]))),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean), xlab = varnames[i], ylab = 'maximum infections', type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c(pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + (2*pred.oat$sd[ix]))),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
# Generate a design for the FAST99 analysis
X.fast <- fast99(model = NULL, factors = colnames(X), n = 3000,
q = "qunif", q.arg = list(min = 0, max = 1))
# Predict the response at the FAST99 design points using the emulator
pred.fast = predict(fit, newdata = X.fast$X, type = 'UK')
# Calculate the sensitivity indices
fast.tell <- tell(X.fast, pred.fast$mean)
bp.convert <- function(fastmodel){
# get the FAST summary into an easier format for barplot
fast.summ <- print(fastmodel)
fast.diff <- fast.summ[ ,2] - fast.summ[ ,1]
fast.bp <- t(cbind(fast.summ[ ,1], fast.diff))
fast.bp
}
par(las = 2, mar = c(9,5,3,2))
barplot(bp.convert(fast.tell), col = c('skyblue', 'grey'), ylab = 'relative sensitivity', main = 'FAST99 Sensitivity')
legend('topleft',legend = c('Main effect', 'Interactions'), fill = c('skyblue', 'grey') )
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean),
xlab = varnames[i], ylab = 'maximum infections', main = 'One-at-a-time sensitivity',
type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c(pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + (2*pred.oat$sd[ix]))),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean),
xlab = varnames[i], ylab = 'maximum infections',
type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c(pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + (2*pred.oat$sd[ix]))),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3), oma = c(0.1,0.1,3,0.1))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean),
xlab = varnames[i], ylab = 'maximum infections',
type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c(pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + (2*pred.oat$sd[ix]))),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
mtext('One-at-a-time sensitivity', side = 3, line = 0)
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3), oma = c(0.1,0.1,3,0.1))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean),
xlab = varnames[i], ylab = 'maximum infections',
type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c(pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + (2*pred.oat$sd[ix]))),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
mtext('One-at-a-time sensitivity', side = 3, line = -1)
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3), oma = c(0.1,0.1,3,0.1))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean),
xlab = varnames[i], ylab = 'maximum infections',
type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c(pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + (2*pred.oat$sd[ix]))),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
mtext('One-at-a-time sensitivity', side = 3, outer = TRUE)
n.oat = 21
X.oat = oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) = colnames(X)
pred.oat = predict(fit, newdata = X.oat, type = 'UK')
col.transp = adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3), oma = c(0.1,0.1,3,0.1))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean),
xlab = varnames[i], ylab = 'maximum infections',
type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c(pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + (2*pred.oat$sd[ix]))),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
mtext('One-at-a-time sensitivity', side = 3, outer = TRUE, cex = 1.5)
n.oat <- 21
X.oat <- oaat.design(X.norm, n = n.oat, hold = rep(0.5,9))
colnames(X.oat) <- colnames(X)
pred.oat <- predict(fit, newdata = X.oat, type = 'UK')
col.transp <- adjustcolor('grey', alpha = 0.5)
par(mfrow = c(3,3), oma = c(0.1,0.1,3,0.1))
for(i in 1:9){
ix <- seq(from = ((i*n.oat) - (n.oat-1)), to =  (i*n.oat), by = 1)
plot(X.oat[ix,i], pred.oat$mean[ix],
xlim = c(0,1), ylim = range(pred.oat$mean),
xlab = varnames[i], ylab = 'maximum infections',
type= 'n')
polygon(x = c(X.oat[ix, i], rev(X.oat[ix, i])),
y = c(pred.oat$mean[ix] - (2*pred.oat$sd[ix]), rev(pred.oat$mean[ix] + (2*pred.oat$sd[ix]))),
col = col.transp, border = col.transp)
lines(X.oat[ix,i], pred.oat$mean[ix], xlim = c(0,1), lty = 'solid')
}
mtext('One-at-a-time sensitivity', side = 3, outer = TRUE, cex = 1.5)
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
meanIP
7.5-5.2
log(0.5)
log(0.35)
0.35^2
exp(0.5)
exp(0.35)
?rlnorm
log(5.2)
log(0.5)
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
IP2
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
source('/net/home/h01/hadda/covid/GenerateParameters.R')
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
###
#new parameters
numruns=5
paramaters3
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
IP
IP1
IP2
incu
meanIP
beta
rzero
source('/net/home/h01/hadda/covid/GenerateParameters.R')
source('/net/home/h01/hadda/covid/GenerateParameters.R')
parameters3
source('/net/home/h01/hadda/covid/GenerateParameters.R')
